<launch>
  <rosparam command="load" file="$(env USER_HOME)/rubis_ws/src/rubis_autorunner/cfg/ionic_autorunner/ionic_autorunner_params.yaml" />

  <arg name="lidar_input_topic" default="/points_raw_origin"/>
  <arg name="lidar_output_topic" default="/points_raw"/>

  <!-- Map TF Publisher -->	
	<include file="$(env USER_HOME)/autoware.ai/autoware_files/data/tf/tf.launch" />
  
  <!-- Vector Map Loader -->
	<node pkg="map_file" type="vector_map_loader" name="vector_map_loader" args="
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/220805_FMTC_v2/dtlane.csv
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/220805_FMTC_v2/lane.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/220805_FMTC_v2/node.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/220805_FMTC_v2/point.csv"/>

  <!-- Point Map Loader -->
	<include file="$(find map_file)/launch/points_map_loader.launch">
    <arg name="scene_num" value="noupdate" />
    <arg name="path_pcd" value="$(env USER_HOME)/autoware.ai/autoware_files/points_map/FMTC_merged.pcd"/>
  </include>  

  <!-- Re-publishing simulator/camera_node/image/compressed topic to /image_raw as expected by Autoware -->
  <!-- <node name="republish" type="republish" pkg="image_transport" output="screen" args="compressed in:=/simulator/camera_node/image raw out:=/image_raw"  /> -->

  <!-- Lidar Launch File -->
  <arg name="pcap" default="" />
  <arg name="calibration" default="$(find velodyne_pointcloud)/params/VLP16_hires_db.yaml"/>
  <arg name="min_range" default="0.4" />
  <arg name="max_range" default="130.0" />
  <arg name="model" default="VLP16"/>
  <arg name="topic_name" default="points_raw"/>

  <!-- start nodelet manager and driver nodelets -->
  <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="pcap" value="$(arg pcap)"/>
  </include>

  <!-- start cloud nodelet -->
  <node pkg="nodelet" type="nodelet" name="cloud_nodelet"
        args="load velodyne_pointcloud/CloudNodelet velodyne_nodelet_manager">
    <param name="calibration" value="$(arg calibration)"/>
    <param name="min_range" value="$(arg min_range)"/>
    <param name="max_range" value="$(arg max_range)"/>
    <remap from="velodyne_points" to="$(arg topic_name)"/>
  </node>


<!-- TF -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_velodyne" args="3.3 -0.8 0.09 -0.53 0 0 base_link velodyne 10"/> -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_velodyne" args="3.3 -0.8 0.09 -0.40 0 0 base_link velodyne 10"/>
  <!-- <node pkg="tf" type="static_transform_publisher" name="gps_to_base_link" args="0 0 0 0 0 0 gps base_link 10"/> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="lidar_to_camera" args="0.029 -0.574 -1.820 4.712 0.009 -1.883 velodyne camera 10" /> -->

  <!-- CAN Interface -->
  <include file="$(find can_translate)/launch/can_translate.launch" />

  <!-- INS-D Sensor -->
  <!-- <include file="$(find inertiallabs_ins)/launch/ins.launch" />   -->
  
  <!-- INS twist generator -->
  <include file="$(find ins_twist_generator)/launch/ins_twist_generator.launch">
    <arg name="yaw_offset" value="-64.569" />
  </include>

  <!-- <include file="$(find ins_twist_generator)/launch/dynamic_ins_twist_generator.launch">
    <arg name="yaw_offset" value="-72.7014" />
    <arg name="yaw_diff_threshold" value="2.0" />
  </include> -->

</launch>

